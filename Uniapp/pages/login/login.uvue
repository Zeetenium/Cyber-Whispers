<template>
	<view class="login">
		<view class="close-button" @click="handleClose">
			<text class="close-icon">×</text>
		</view>
		<view class="login-header">
			<text class="main-title">Cyber Whispers</text>
			<text class="sub-title">登录/注册认证</text>
		</view>

		<view class="login-form">
			<view class="input-item">
				<text class="section-title">邮箱地址</text>
				<view class="email-input">
					<input class="popup-content-input" v-model="email" placeholder="请输入邮箱" />
					<view class="send-button" @click="handleSend">
						<text class="send-text">{{ time > 0 ? time + "s" : "发送验证码" }}</text>
					</view>
				</view>
			</view>

			<view class="input-item">
				<text class="section-title">验证码</text>
				<view class="code-input">
					<input class="popup-content-input" :maxlength="capacity" v-model="code" placeholder="请输入邮箱验证码" />
				</view>
			</view>

			<view class="login-button" @click="handleValidate">
				<text class="login-button-text">登录</text>
			</view>
		</view>
	</view>
</template>

<script setup>
	const email = ref<string>("");
	const code = ref<string>("");
	const _id = ref<string>(""); // 用于存储验证码接口返回的ID
	const capacity : number = 6;
	const time = ref<number>(0);
	let timer : number = 0;

	const emailValidateCode = uniCloud.importObject("email-validate-code");
	const userApi = uniCloud.importObject("users");

	const sendEmailCode = async () : Promise<void> => {
		try {
			const result = await emailValidateCode.sendEmailCode({
				capacity: capacity,
				validMinute: 5,
				serviceType: "netease",
				email: email.value,
				subject: "Cyber Whispers | 身份验证请求",
				text: "您好！您正在「Cyber Whispers」进行登录或注册操作，验证码为：#code#。请勿将验证码泄露给他人。"
			}) as UTSJSONObject;

			const success = result['success'] as boolean | null;
			const id = result['id'] as string | null;
			const message = result['message'] as string | null;

			if (success == true && id != null) {
				_id.value = id;
				uni.showToast({
					icon: "none",
					title: "验证码发送成功"
				});
			} else {
				uni.showToast({
					icon: "none",
					title: message ?? "发送失败"
				});
			}
		} catch (error) {
			console.error("发送验证码错误:", error);
			uni.showToast({
				icon: "none",
				title: "发送失败，请重试"
			});
		}
	};

	const validateEmailCode = async () : Promise<void> => {
		try {
			const result = await userApi.login({
				_id: _id.value,
				email: email.value,
				code: code.value
			}) as UTSJSONObject;

			const errCode = result['errCode'] as number;
			const msg = result['msg'] as string | null;

			if (errCode == 0) {
				const data = result['data'] as UTSJSONObject | null;
				if (data != null) {
					const token = data['token'] as string | null;
					const userInfo = data['userInfo'] as UTSJSONObject | null;

					if (token != null && userInfo != null) {
						uni.setStorageSync('token', token);
						uni.setStorageSync('user-info', userInfo);
						uni.setStorageSync('isLoggedIn', true);

						uni.$emit('loginStateChanged');
						uni.showToast({
							icon: "none",
							title: "登录成功"
						});
						uni.reLaunch({
							url: '/pages/index/index',
						});
					} else {
						uni.showToast({ icon: "none", title: "登录响应异常" });
					}
				}
			} else {
				uni.showToast({
					icon: "none",
					title: msg ?? '登录失败'
				});
			}
		} catch (error) {
			uni.showToast({
				icon: "none",
				title: "操作失败，请重试"
			});
		}
	};

	const handleClose = () : void => {
		uni.navigateBack();
	};

	const handleSend = () : void => {
		const reg = /^\w[-\w.+]*@([A-Za-z0-9]+[-A-Za-z0-9]*\.){1,}[A-Za-z0-9]{2,}$/;
		if (!reg.test(email.value)) {
			uni.showToast({
				title: "请输入正确的邮箱",
				icon: "none"
			});
			return;
		}

		if (time.value == 0) {
			time.value = 60;
			timer = setInterval(() => {
				time.value = time.value - 1;
				if (time.value == 0) {
					if (timer != 0) {
						clearInterval(timer);
						timer = 0;
					}
				}
			}, 1000);
			sendEmailCode();
		}
	};

	const handleValidate = async () : Promise<void> => {
		if (email.value.length == 0 || code.value.length == 0) {
			uni.showToast({
				icon: "none",
				title: email.value.length > 0 ? "请输入邮箱验证码" : "请输入邮箱"
			});
			return;
		}
		await validateEmailCode();
	};
</script>

<style>
	.login {
		background-color: #050510;
		position: relative;
		height: 100%;
		width: 100%;
	}

	.login-header {
		padding-top: 130rpx;
		padding-bottom: 50rpx;
		padding-left: 40rpx;
		background-color: #060616;
		border-bottom: 2rpx solid #1a1a2e;
	}

	.main-title {
		font-size: 52rpx;
		font-weight: bold;
		color: #00e4ff;
		margin-bottom: 16rpx;
		display: flex;
		font-family: monospace;
	}

	.sub-title {
		font-size: 26rpx;
		color: #8892b0;
		display: flex;
	}

	.login-form {
		padding: 64rpx 40rpx;
		flex: 1;
	}

	.input-item {
		width: 100%;
		margin-bottom: 48rpx;
	}

	.section-title {
		font-size: 24rpx;
		color: #a8b2d1;
		margin-bottom: 20rpx;
		display: flex;
	}

	.email-input,
	.code-input {
		display: flex;
		flex-direction: row;
		align-items: center;
		width: 100%;
		background-color: #0d1117;
		border: 2rpx solid #30363d;
		border-radius: 10rpx;
		padding: 20rpx;
	}

	.popup-content-input {
		flex: 1;
		height: 64rpx;
		border: none;
		background-color: transparent;
		color: #f0f6fc;
		font-size: 26rpx;
	}

	.send-button {
		width: 170rpx;
		height: 60rpx;
		background-color: #238636;
		border-radius: 8rpx;
		display: flex;
		justify-content: center;
		align-items: center;
		margin-left: 16rpx;
	}

	.send-text {
		color: #ffffff;
		font-size: 22rpx;
	}

	.login-button {
		width: 100%;
		height: 80rpx;
		background-color: #1f6feb;
		border-radius: 12rpx;
		display: flex;
		justify-content: center;
		align-items: center;
		margin-top: 64rpx;
		border: 2rpx solid #388bfd;
	}

	.login-button-text {
		color: #ffffff;
		font-size: 28rpx;
		font-weight: bold;
	}

	.close-button {
		position: absolute;
		top: 90rpx;
		right: 40rpx;
		width: 50rpx;
		height: 50rpx;
		display: flex;
		justify-content: center;
		align-items: center;
		z-index: 100;
	}

	.close-icon {
		font-size: 50rpx;
		color: #8892b0;
		font-weight: normal;
	}
</style>